import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from optuna.integration import shap
import shap
from catboost import CatBoostRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, mean_absolute_percentage_error
from sklearn.model_selection import train_test_split
from io import StringIO
from catboost import Pool
from PIL import Image
from sqlalchemy import create_engine
from streamlit_extras.metric_cards import style_metric_cards

st.set_option('deprecation.showPyplotGlobalUse', False)

st.set_page_config(page_title="CatBoost", page_icon="üìà", layout="wide")

st.title("–†—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã.")

st.subheader(
    "–ü–æ–ª—É—á–∏–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—É—é —Ü–µ–Ω—É —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤ –∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –º–æ–¥–µ–ª–∏.")

with open('style.css') as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

st.sidebar.image("data/logo1.png", caption="Work done by Alekseeva Ekaterina INBO-06-20")
st.sidebar.title("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–æ–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã")

# db
db_connection_str = 'mysql+pymysql://root:2sm77XL0.@127.0.0.1:3306/streamlitkr'
db_connection = create_engine(db_connection_str)

df = pd.read_sql('SELECT * FROM sberdata', con=db_connection)
df = pd.DataFrame(df, columns=['Unnamed', 'timestamp', 'price_doc', 'full_sq', 'life_sq', 'floor',
                               'max_floor', 'build_year', 'num_room', 'product_type', 'sub_area',
                               'raion_popul', 'green_zone_part', 'metro_min_avto', 'metro_km_avto',
                               'kremlin_km'])

df = df[df['max_floor'] != 0]
selected_columns = [
    'full_sq', 'life_sq', 'floor', 'max_floor',
    'build_year', 'num_room', 'raion_popul',
    'green_zone_part', 'metro_min_avto', 'metro_km_avto', 'kremlin_km']
df_selected = df[selected_columns].dropna()

def remove_outliers(df, columns):
    Q1 = df[columns].quantile(0.25)
    Q3 = df[columns].quantile(0.75)
    IQR = Q3 - Q1

    df_clean = df[~((df[columns] < (Q1 - 1.5 * IQR)) | (df[columns] > (Q3 + 1.5 * IQR))).any(axis=1)]
    return df_clean

df_cleaned = remove_outliers(df, selected_columns)

df_cleaned[['build_year', 'floor', 'max_floor']] = df_cleaned[['build_year', 'floor', 'max_floor']].astype('int64')

X = df_cleaned[['full_sq', 'life_sq', 'floor', 'max_floor',
    'build_year', 'num_room', 'raion_popul',
    'green_zone_part', 'metro_min_avto', 'metro_km_avto', 'kremlin_km']]
y = df_cleaned.price_doc

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=23)


model = CatBoostRegressor()
model.load_model('CatBoostModel.cbm')

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
mape = mean_absolute_percentage_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred) ** 0.5

metric1, metric2, metric3, metric4, metric5 = st.columns(5, gap='small')
with metric1:
    st.info('MSE', icon="üìå")
    st.metric(label="MSE", value=round(mse, 3))
with metric2:
    st.info('MAE', icon="üìå")
    st.metric(label="MAE", value=round(mae, 3))
with metric3:
    st.info('R2', icon="üìå")
    st.metric(label="R2", value=round(r2, 3))
with metric4:
    st.info('RMSE', icon="üìå")
    st.metric(label="RMSE", value=round(rmse, 3))
with metric5:
    st.info('MAPE', icon="üìå")
    st.metric(label="MAPE", value=round(mape, 3))

style_metric_cards(background_color="#172d43", border_left_color="#ff4b4b",
                   border_color="#1f66bd", box_shadow="#F71938")

def shap_beeswarm():
    test_pool = Pool(X_test, label=y_test, cat_features=['build_year', 'floor', 'max_floor'])

    explainer = shap.Explainer(model=model, seed=555, feature_names=test_pool.get_feature_names())
    shap_values = explainer(X_test, y=test_pool.get_label())
    shap.initjs()

    plt.rcParams['savefig.transparent']='True'
    plt.rcParams['axes.labelcolor'] = 'white'
    plt.rcParams['xtick.color'] = 'white'
    plt.rcParams['ytick.color'] = 'white'
    shap.plots.beeswarm(shap_values=shap_values)

    plt.savefig('shap_beeswarm_plot.png', bbox_inches = 'tight')
    plt.close()

shap_beeswarm()
image = Image.open('shap_beeswarm_plot.png')

col1, col2 = st.columns([1, 1])
with col1:
    st.subheader("–ù–∏–∂–µ –≤—ã –≤–∏–¥–∏—Ç–µ –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∫–∞–∫ –≤–ª–∏—è—é—Ç –Ω–∞ —Ü–µ–Ω—ã –∫–≤–∞—Ä—Ç–∏—Ä.")
    st.image(image, caption='SHAP Beeswarm Plot', width=1000)
with col2:
    st.subheader("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
    st.write("–ö–∞–∫ –º—ã –º–æ–∂–µ–º –≤–∏–¥–µ—Ç—å –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞, –º–æ–¥–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.")
    st.write(
        "–ß–µ–º –±–æ–ª—å—à–µ –¥–∏—Å–ø–µ—Ä—Å–∏—è –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º - —Ç–µ–º –±–æ–ª—å—à–µ –≤–ª–∏—è–Ω–∏—è –æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞ —Ç–∞—Ä–≥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "
        "–º–æ–¥–µ–ª–∏. –¶–≤–µ—Ç–∞ —Ç–æ—á–µ–∫ –≤–ª–∏—è—é—Ç –Ω–∞ '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, —Ç–æ –µ—Å—Ç—å —Å–∏–Ω–∏–µ —Ç–æ—á–∫–∏ - —É–º–µ–Ω—å—à–∞—é—Ç —Ç–∞—Ä–≥–µ—Ç, "
        "–∞ –∫—Ä–∞—Å–Ω—ã–µ - —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç, –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, —Ü–µ–Ω—É –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–∏ –∞–±—Ü–∏—Å—Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ. –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")

    st.write(
        "–ò–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –≤–∏–¥–∏–º, —á—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–π –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ–≥–Ω–æ–∑ –≤–Ω–æ—Å—è—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏: full_sq (–æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã), kremlin_km (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞), build_year (–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏) –∏ life_sq (–∂–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å).")

    st.write(
        "–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫, –º–µ—Ç—Ä–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–ø—Ä–∏–∑–Ω–∞–∫ full_sq). –ú—ã –≤–∏–¥–∏–º, —á—Ç–æ —á–µ–º –º–µ–Ω—å—à–µ –æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã, —Ç–µ–º –º–µ–Ω—å—à–µ –Ω–∞ –Ω–µ–µ —Ü–µ–Ω–∞ (–≥–æ–ª—É–±—ã–µ —Ç–æ—á–∫–∏ —Å–ª–µ–≤–∞ –æ—Ç –æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ 0).  –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, —á–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã - —Ç–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Ç–∞—Ä–≥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å —Ü–µ–Ω–∞.")

    st.write(
        "–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–π —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞, —á–µ–º –º–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–∫—Ä–∞—Å–Ω—ã–µ —Ç–æ—á–∫–∏ —Å–ª–µ–≤–∞ –æ—Ç –æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ 0) - —Ç–µ–º –±–æ–ª—å—à–µ —Ü–µ–Ω–∞ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.")

    st.write(
        "–í –∑–∞–∫–ª—é—á–µ–Ω–∏–∏, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–∑–Ω–∞–∫ build_year, –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞. –ú—ã –≤–∏–¥–∏–º, —á—Ç–æ –∫—Ä–∞—Å–Ω—ã–µ —Ç–æ—á–∫–∏ –µ—Å—Ç—å –∏ —Å–ø—Ä–∞–≤–∞ –∏ —Å–ª–µ–≤–∞ –æ—Ç –æ—Å–∏ –æ—Ä–¥–∏–Ω–∞—Ç –≤ 0. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ –¥–æ–º–∞ –∏ –Ω–æ–≤—ã–µ —Å—Ç–æ—è—Ç –¥–æ—Ä–æ–∂–µ, —á–µ–º –¥–æ–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –≤ 1960-90—Ö –≥–æ–¥–∞—Ö.")

default_district = ['Severnoe Butovo']
district = st.sidebar.multiselect(
    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:",
    options=df["sub_area"].sort_values().unique(),
    default=default_district
)

default_max_floor = [9.0]
def get_unique_max_floor(df):
    return np.unique(df.floor).tolist()


unique_maxfloor = get_unique_max_floor(df)
min_maxfloor = min(unique_maxfloor)
max_maxfloor = max(unique_maxfloor)

max_floor_switcher = st.sidebar.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", min_value=min_maxfloor,
                                       max_value=max_maxfloor,
                                       value=default_max_floor, step=1.0)


default_floor = [6.0]
def get_unique_floor(df):
    return np.unique(df.floor).tolist()


unique_floor = get_unique_floor(df)
min_floor = min(unique_floor)
max_floor = max(unique_floor)

floor = st.sidebar.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —ç—Ç–∞–∂:", min_value=min_floor, max_value=max_floor,
                          value=default_floor, step=1.0)

default_full_sq = [45.0]
full_sq = st.sidebar.slider("–£–∫–∞–∂–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –≤–∫–ª—é—á–∞—è –±–∞–ª–∫–æ–Ω—ã, –∫—É—Ö–Ω—é –∏ —Ç.–¥.", min_value=1.0, max_value=150.0,
                            value=default_full_sq, step=1.0)

default_life_sq = [27.0]
life_sq = st.sidebar.slider("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã, —Ç–æ–ª—å–∫–æ –∂–∏–ª—É—é –ø–ª–æ—â–∞–¥—å:", min_value=1.0, max_value=150.0,
                            value=default_life_sq, step=1.0)

default_num_rooms = [2.0]
num_room = st.sidebar.slider('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:', min_value=1.0, max_value=15.0,
                             value=default_num_rooms, step=1.0)

default_build_year = [1970.0]
build_year = st.sidebar.slider('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞:', min_value=1800.0, max_value=2020.0,
                             value=default_build_year, step=1.0)

raion_popul = st.sidebar.number_input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–∞—Å–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –í–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:')
st.sidebar.write('–ó–∞—Å–µ–ª–µ–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:', raion_popul)

green_zone_part = st.sidebar.number_input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –¥–æ–ª—è –ø–ª–æ—â–∞–¥–∏ –∑–µ–ª–µ–Ω–∏ –≤ –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ –í–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:')
st.sidebar.write('–ó–∞—Å–µ–ª–µ–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:', green_zone_part)

metro_min_avto = st.sidebar.number_input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ç—Ä–æ –Ω–∞ –º–∞—à–∏–Ω–µ:')
st.sidebar.write('–ó–∞—Å–µ–ª–µ–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:', metro_min_avto)

metro_km_avto = st.sidebar.number_input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ç—Ä–æ –Ω–∞ –º–∞—à–∏–Ω–µ:')
st.sidebar.write('–ó–∞—Å–µ–ª–µ–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:', metro_km_avto)

kremlin_km = st.sidebar.number_input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞:')
st.sidebar.write('–í–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ —Ç–∞–∫–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞:', kremlin_km)

dict_data = {
    'full_sq': full_sq,
    'life_sq': life_sq,
    'floor': floor,
    'max_floor': max_floor_switcher,
    'build_year': build_year,
    'num_room': num_room,
    'raion_popul': raion_popul,
    'green_zone_part': green_zone_part,
    'metro_min_avto': metro_min_avto,
    'metro_km_avto': metro_km_avto,
    'kremlin_km': kremlin_km
}

df_reg = pd.DataFrame.from_dict(dict_data)

st.subheader(
    "–í–≤–µ–¥–∏—Ç–µ –≤ –ª–µ–≤–æ–µ –º–µ–Ω—é –¥–∞–Ω–Ω—ã–µ –ø–æ –í–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ. –ù–∏–∂–µ –ø–æ–¥—Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.")


y1 = model.predict(df_reg)
our_price = y1.astype(int)[0]

txt = "üëõ " + str(our_price) + " ‚ÇΩ"
htmlstr1 = f"""<p style='background-color:#172d43;
                                           color:white;
                                           font-size:54px;
                                           border-radius:15px;
                                           line-height:60px;
                                           padding:17px;
                                           opacity:1.0;
                                           text-align: center'>
                                           {txt}</style>
                                           <br></p>"""
st.markdown(htmlstr1, unsafe_allow_html=True)

def graphs():
    test_pool = Pool(data=df_reg, label=[our_price])

    explainer_new = shap.Explainer(model=model, seed=555, feature_names=test_pool.get_feature_names())
    shap_values_new = explainer_new(df_reg, y=test_pool.get_label())
    shap.initjs()

    shap.plots.force(shap_values_new[0], show=True)

    shap.save_html('shap_plot_new.html', shap.plots.force(shap_values_new[0]))

    with open('shap_plot_new.html', 'r', encoding='utf-8') as file:
        html_code_new = file.read()

    st.components.v1.html(html_code_new, height=300)

st.subheader(
    "–ù–∏–∂–µ –≤—ã –≤–∏–¥–∏—Ç–µ –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∫–∞–∫ –≤–ª–∏—è—é—Ç –Ω–∞ —Ü–µ–Ω—É –í–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã.")

graphs()


