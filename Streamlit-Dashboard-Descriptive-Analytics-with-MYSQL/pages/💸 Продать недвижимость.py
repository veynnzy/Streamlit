import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from io import StringIO
import io
from sqlalchemy import create_engine
from datetime import datetime

st.set_option('deprecation.showPyplotGlobalUse', False)

st.set_page_config(page_title="Sale", page_icon="üíµ", layout="wide")

st.title("–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")

st.subheader(
    "–ß—Ç–æ–±—ã –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∫–≤–∞—Ä—Ç–∏—Ä—É - –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ.")

with open('style.css') as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

st.sidebar.image("data/logo1.png", caption="Work done by Alekseeva Ekaterina INBO-06-20")

db_connection_str = 'mysql+pymysql://root:2sm77XL0.@127.0.0.1:3306/streamlitkr'
db_connection = create_engine(db_connection_str)

df = pd.read_sql('SELECT * FROM sberdata', con=db_connection)
df = pd.DataFrame(df, columns=['Unnamed', 'timestamp', 'price_doc', 'full_sq', 'life_sq', 'floor',
                               'max_floor', 'build_year', 'num_room', 'product_type', 'sub_area',
                               'raion_popul', 'green_zone_part', 'metro_min_avto', 'metro_km_avto',
                               'kremlin_km'])

col11, col12 = st.columns([1, 1])
with col11:
    st.subheader("–ü—Ä–æ–¥–∞–∂–∞ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞.")
    st.write("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –í–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –Ω–∏–∂–µ.")

    ###############################
    ########## TIMESTAMP ##########
    ###############################

    timestamp = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –í–∞—à—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É. –ï—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –Ω–µ –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ.", value=None)
    if timestamp == None:
        timestamp = datetime.now().date()
    st.write("–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ", timestamp)

    ###############################
    ########## PRICE ##############
    ###############################

    price_doc = st.number_input('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã')
    st.write('–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã:', price_doc)

    ###############################
    ########## SQUARES ############
    ###############################

    default_full_sq = [45.0]
    full_sq = st.slider("–£–∫–∞–∂–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –≤–∫–ª—é—á–∞—è –±–∞–ª–∫–æ–Ω—ã, –∫—É—Ö–Ω—é –∏ —Ç.–¥.", min_value=1.0,
                                max_value=150.0,
                                value=default_full_sq, step=1.0)

    default_life_sq = [27.0]
    life_sq = st.slider("–£–∫–∞–∂–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã, —Ç–æ–ª—å–∫–æ –∂–∏–ª—É—é –ø–ª–æ—â–∞–¥—å:", min_value=1.0, max_value=150.0,
                                value=default_life_sq, step=1.0)

    ###############################
    ########### FLOOR #############
    ###############################

    default_floor = [6.0]
    def get_unique_floor(df):
        return np.unique(df.floor).tolist()


    unique_floor = get_unique_floor(df)
    min_floor = min(unique_floor)
    max_floor = max(unique_floor)

    floor = st.slider("–£–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–∂, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞:", min_value=min_floor, max_value=max_floor,
                              value=default_floor, step=1.0)

    ###############################
    ########### MAX_FLOOR #########
    ###############################

    default_max_floor = [9.0]
    def get_unique_max_floor(df):
        return np.unique(df.floor).tolist()


    unique_maxfloor = get_unique_max_floor(df)
    min_maxfloor = min(unique_maxfloor)
    max_maxfloor = max(unique_maxfloor)

    max_floor_switcher = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", min_value=min_maxfloor,
                                           max_value=max_maxfloor,
                                           value=default_max_floor, step=1.0)

    ###############################
    ########### YEAR ##############
    ###############################

    default_build_year = [1970.0]
    build_year = st.slider('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞:', min_value=1800.0, max_value=2020.0,
                                   value=default_build_year, step=1.0)

    ###############################
    ########### NUM_ROOMS #########
    ###############################

    default_num_rooms = [2.0]
    num_room = st.slider('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:', min_value=1.0, max_value=15.0,
                                 value=default_num_rooms, step=1.0)

    ###############################
    ########### PRODUCT_TYPE ######
    ###############################

    product_type = 'Investment'

    ###############################
    ########### DISTRICT ##########
    ###############################

    default_district = ['Alekseevskoe']
    district = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:",
        options=df["sub_area"].sort_values().unique(),
        default=default_district
    )

    ###############################
    ########### RAION_POPUL #######
    ###############################

    raion_popul = st.number_input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–∞—Å–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –í–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:')
    st.write('–ó–∞—Å–µ–ª–µ–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:', raion_popul)

    ###############################
    #####GREEN_ZONE_PART ##########
    ###############################

    green_zone_part = st.number_input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –¥–æ–ª—è –ø–ª–æ—â–∞–¥–∏ –∑–µ–ª–µ–Ω–∏ –≤ –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ –í–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:')
    st.write('–ó–∞—Å–µ–ª–µ–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:', green_zone_part)

    ###############################
    ###### METRO_MIN and KM #######
    ###############################

    metro_min_avto = st.number_input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ç—Ä–æ –Ω–∞ –º–∞—à–∏–Ω–µ:')
    st.write('–ó–∞—Å–µ–ª–µ–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:', metro_min_avto)

    metro_km_avto = st.number_input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ç—Ä–æ –Ω–∞ –º–∞—à–∏–Ω–µ:')
    st.write('–ó–∞—Å–µ–ª–µ–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞:', metro_km_avto)

    ###############################
    ###### KREMLIN DIST ###########
    ###############################

    kremlin_km = st.number_input('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞:')
    st.write('–í–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ —Ç–∞–∫–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞:', kremlin_km)

    dict_df = {
        'timestamp': timestamp,
        'price_doc': price_doc,
        'full_sq': full_sq,
        'life_sq': life_sq,
        'floor': floor,
        'max_floor': max_floor_switcher,
        'build_year': build_year,
        'num_room': num_room,
        'product_type': product_type,
        'sub_area': district,
        'raion_popul': raion_popul,
        'green_zone_part': green_zone_part,
        'metro_min_avto': metro_min_avto,
        'metro_km_avto': metro_km_avto,
        'kremlin_km': kremlin_km
    }

    df_db = pd.DataFrame.from_dict(dict_df)

    if st.button('–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ', type='primary', key='button1'):
        st.write(df_db)
        try:
            df_db.to_sql('sberdata', con=db_connection, if_exists='append', index=False)
            st.success('–ó–∞—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.')
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")


with col12:
    st.subheader("–ü—Ä–æ–¥–∞–∂–∞ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü.")
    st.write("–û–±—Ä–∞–∑–µ—Ü –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –Ω–∏–∂–µ.")

    @st.cache_data
    def convert_to_csv(df):
        return df.to_csv(index=False).encode('utf-8')

    example = pd.DataFrame(columns=['timestamp', 'price_doc', 'full_sq', 'life_sq', 'floor', 'max_floor', 'build_year',
                                    'num_room', 'product_type', 'sub_area', 'raion_popul', 'green_zone_part',
                                    'metro_min_avto', 'metro_km_avto', 'kremlin_km'])


    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
        example.to_excel(writer, sheet_name='–ö–Ω–∏–≥–∞ 1', index=False)
        writer.close()

        download_example = st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–∑–µ—Ü",
            data=buffer,
            file_name='Example.xlsx',
            mime='application/vnd.ms-excel'
        )

    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑–µ—Ü —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–≤–∞—Ä—Ç–∏—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ csv. ")

    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ csv.")
    if uploaded_file is not None:
        # upload_df = pd.read_csv(uploaded_file)
        upload_excel = pd.read_excel(uploaded_file)
        upload_df = pd.DataFrame(upload_excel)
        st.dataframe(upload_df.head(5))

    if st.button('–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ.', type='primary', key='button2'):
        try:
            upload_df.to_sql('sberdata', con=db_connection, if_exists='append', index=False)
            st.success('–ó–∞—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.')
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

